

自动化框架结构，目录：
api
script
report
data
conftest.py
pytest.ini





pytest初始化：
使用 setup_xx(): 和 teardown_(): 其中（）填写method，class，modul。set_up会在函数执行前执行，teardown会在函数执行完之后执行
（1）方法的初始化清除：（代码放在，和相同的方法相同的地方）
setup_method():
  pass
teardown_mothod():
  pass
（2）类的初始化清除：（代码放在类的下面）
@classmethod
setup_class(cls):
  pass
teardown_class(cls):
  pass
（3）模块的初始化清除（放在在外层）：
def setup_module():
  pass
def teardown_module():
  pass
（4）整个目录的初始化清除：
创建conftest.py文件在目录下
import pytest
@pytest.fixture(scope='package', autouse=True)      # autouse=True 自动执行，如果不设置的话，需要在用例中声明使用conftest。
def set_emptyEnv():
    print('目录初始化开始')
    yield
    print("目录初始化结束")


pytest的选择执行：
（1）在pytest的命令中选择执文件，模块，类，方法
pytest case/test_1.py（选择执行文件）::Test_a（选择执行类）::test_1（选择执行方法）
（2）对需要执行的、类、方法进行标记
@pytest.mark.smoke（标记的名称）
调用的时候， pytet -m smoke
（3）给整个文件创建标记：
新建全局变量，将标记赋值给变量
abc = [pytest.mark.xx, pytest.mark.smoke]    #同时给该文件标记了 xxx和smoke，-m xx和 -m smoke 都可以调用的该文件


pytest生成报告：
（1）allure
1.pytest.ini 文件
      [pytest]
      addopts = -s --alluredir report
      testpaths = ./script
      python_files = test*.py
      python_classes = Test*
      python_functions=test*
2.运行pytest，执行后生成的文件会存在于（哪里我也不知道）中
3.运行allure，会将上面的执行过生成html的报告
  allure server report

（2）pytest-html
1.运行命令  pytest case（用例文件） --html=/case/report.html（设置报告的生成位置和文件名） --self-contained-html（取消生成的报错的资源文件，我没找到不用的话生成啥文件了）



注意点：
（1）因为这边都是通过json传参的，格式如下所示：
  jsondata = {"limit":10,"order":"desc","page":1,"querydict":{"create_by":"王"}}
  在request.post(json=jsondata)，通过这种方式进行传递
（2）


文件上传：
    1.python调用文件发送接口（非multipart/form-data）
        file = {                                          #上传文件请求body中的最后，关于文件的值，放在这里
            "file_obj": open('test.zip','rb'),
            "Content-Type":"application/x-zip-compressed",
            "Content-Disposition":"form-data",
            "filename":"test.zip"
        
        }
        
        data = {                                          #请求body中，除了文件外的其他的所有值，填写到data中，如果没有其他值，可以不用写
            "sample_name": "37571.pcap",
            "owner_group": "/data/atp/pcap/custom/test",
            "type": "1",
            "sample_file_path": "",
            "description_file_path": "",
            # "description_file":""
        }
        
        response = requests.post(url=url, files=file, headers=headers, verify=False, data=data).text
    
    总结：headers中不要自己填写content-tpye，注意重点位置的代码，就可以了


json文件取值，通过 .get("参数名")

（3）python获取当前执行文件所在的绝对路径
  import os
  path_xx = os.path.dirname(__file__)





问题：
（1）如何封装一个python文件，可以在另一个文件中import导入

解决：比如两个文件在同一个文件夹 a 下，在1.py下导入2.py中的类，
使用from a.2 import class ，需要从a（目录名开始写）
这个地方使用相对路径，如：..2.py 的格式，导入的时候不会报错，但是在执行的时候，会报错

（2）一个查询的请求，通过requests发送不出去了，是因为被ssl拦截，通过verify=False的方式不能解决，报错中提示的urllib3。看看有没有别的方式解决

解决： （1）通过verify=False可以解决问题，只是会报一个warning，其实请求已经发送了的
       （2）相应要使用 .text 来处理一下，否则内容为空，错认为请求未发送
       （3）屏蔽warning信息：
            1. requests.packages.urllib3.disable_warnings()                             #代码写在调用请求之前
            2. urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)      #也可以关闭掉ssl的提示，但是需要先导入urllib3的包

（）



pytest问题


（1）pytest的整体框架是啥样的，每个文件是干嘛的，每个文件中的构造是啥样的，

（2）待解决问题，运行时，代码自动跑的是pytest的格式。
保证文件名字不是 *_test 或者  test_* 的就不会默认执行pytst了

（3）json数据中有的 null 时，会报错，可以通过None替换null，可以达到同样的效果

（4）视频中，每个类，类下的每个方法，左侧都有一个运行按钮（和main函数的左侧一样），但是我的类和类方法左侧没有按钮，这样，运行时也只能全部运行代码，不能选择在方法上运行和运行整个类
将类名命名为 Test_ 开头的，方法名命名为 test_ 开头的，就会出现运行按钮，这时在不同的位置，右键运行也是可以运行的单个方法
同时，整个py文件也要写成是 test_ 开头的，不然通过cmd或者terminal中运行的时候，会找不到文件

（5）pytest生成报告的方式
allure
1.github下载allure，解压，配置环境变量。
2.配置pytest.ini
    [pytest]
    addopts = -s --alluredir report
    testpaths = ./script
    python_files = test*.py
    python_classes = Test*
    python_functions=test*
3.运行测试文件 pytest，生成报告的json文件存放在 report文件中，
4.运行  allure server report ，通过report中的文件，生成报告

pytest-html
1.运行命令  pytest case（用例文件） --html=/case/report.html（设置报告的生成位置和文件名） --self-contained-html（取消生成的报错的资源文件，我没找到不用的话生成啥文件了）

（6）cmd中运行pytest报错：不识别pytest命令
python -m pytest  这样就可以了

（7）pip安装第三方库
-i 参数配置镜像地址
设置pip的默认镜像地址   pip config set global.index-url http://mirrors.tools.huawei.com/pypi/simple/
有时候直接使用pip或者是pytest报错的，可以使用python -m pip/pytest

（8）requests用于做接口测试（发请求，判断相应），selenuim做web测试（模拟用户端的ui）


