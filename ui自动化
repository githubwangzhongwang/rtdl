UI自动化

以chrome的131.0版本进行试验
1.selenium安装
（1）启动浏览器是时候，报错，需要安全对应浏览器的driver。
    比如：chrome浏览器的下载地址：https://googlechromelabs.github.io/chrome-for-testing/#canary        # 主要版本，版本不正确会有很多奇怪的错误
    安装对应浏览器的版本就可以，目前只能找到最新的版本，可以通过更新浏览器实现版本对应吧
（2）解压文件，整个文件解压到chrome的安装目录中
    我的是在 C:\Program Files\Google\Chrome\Application

（3）代码中配置chromedriver的路径
    service = webdriver.ChromeService(executable_path='C:\Program Files\Google\Chrome\Application\chromedriver-win64\chromedriver.exe')   # 指定驱动的路径
    driver = webdriver.Chrome(service=service)
（4）页面还是会自动关闭，和selenium的版本有关系

我按照上面的步骤操作下来，可以打开浏览器（和我自用的的浏览器版本相同），可以打开具体的页面进行操作





功能
（1）driver.maximize_window()    #最大化窗口
（2）driver.implicitly_wait(10)        #隐式等待，可能不叫这个名字，用来等待页面相应的，如果页面过大的，可以等待加载页面，网络加载的时间
（3）time.sleep(10)        #可以使用sleep函数，直接设置整体页面的等待时间

（4）通过xpath进行定位，在浏览器的f12中，选中点击或输入的js代码，右键点击复制，选择复制xpath
    driver.find_element(By.XPATH, "//*[@id='username']").send_keys('yWX1334877')    #在xpath指定的位置进行输入
    driver.find_element(By.XPATH, "//*[@id='w3-login-button']").click()             #在xpath指定的位置进行点击
（5）text=driver.find_element(By.XPATH, "//*[@id='w3-login-button']").text()        #取值
（6）driver.find_element(By.LINK_TEXT, '更多')                                      #通过页面中的链接名取值，如页面中存在登录的按钮，这里就可以写“登录”

（7）有些功能是通过鼠标悬停后，才会弹出点击框，尤其是在通过 link_text 去定位文中内容的时候，其实也可以直接使用xpath去定位，隐藏标签也可以直接定位到
    mouse = driver.find_element(By.LINK_TEXT, '更多')            # 定位到更多
    ActionChains(driver).move_to_element(mouse).perform()       # 关键位置，设置鼠标移动后悬停在该位置，这里也可以设置个隐式等待时间
    driver.find_element(By.LINK_TEXT, '翻译').click()            #正常点击该位置

（8）实现回车功能，有的地方的输入框，输入完检索内容后，没有点击查询的位置，只能通过回车进行确认执行，这种的可以使用该功能
    driver.find_element(By.XPATH, '//*[@id="rc_select_0"]').send_keys('web')         #这里是在功能框中进行输入，不可以在后面再添加 .send.keys(),也就是这两步不能写成一步执行，否则会报错
    driver.find_element(By.XPATH, '//*[@id="rc_select_0"]').send_keys(Keys.ENTER)    #通过发送Keys.ENTER，进行回车，注意这里的Keys需要导入库

（9）标签页切换，当打开浏览器之后，在其中再打开一个页面，如果对第二个页面进行操作，发现会报错，应为这里操作指向的还是第一个页面，需要手动切换到第二个页签中
    handles = driver.window_handles        #这里得到的handles是一个列表，通过handle[0]这种的去取页签的值
    driver.switch_to.window(handles[1])    #这样可以直接切换到指定的页签中。切换后，所有的操作就是在对这个新的页签进行操作了

（10）

（）driver.close()        #关闭浏览器的当前页面，如果是在一次用例中，打开一个页面后，又打开了另一个页面的这种，关闭的会是最开始打开的那个页面（问题解决，这里切换窗口句柄就可以）
（）driver.quit()         #关闭整个浏览器




特性：
（1）可以通过setup_class()，这种pytest的初始化方式，将浏览器的打开和配置工作前置，这样直接在下面引用self.driver即可，但要注意的是，selenium本身设置的浏览器在执行完之后，会自动关闭，如果前置话操作的话，
    自动关闭功能会失效，需要在填写 teardown_class() 着这里使用quit（），这样也可以实现关闭浏览器






问题
（1）有时候昨天可以运行的脚本，今天就运行不了了
答：版本和配置的问题，如果正常安装配置后，是有问题的，就安装上面的步骤进行配置

（2）每次写完的脚本，第一次运行大概率出问题，之后再运行一次就好了
答：版本和配置的问题，如果正常安装配置后，是有问题的，就安装上面的步骤进行配置

（3）都是退出功能，但是在不同的页面，xpath的不相同的，这样，如果想实现后置处理的时候（自动退出登录），会导致根据xpath找不到退出功能
再去找xpath的时候，要去找整个按钮的xpath，不要去找按钮中字段的xpath，比如退出时，去锁定这段代码，鼠标悬浮在这个位置后，稍微往外拉一点，锁定到整个按钮的xpath就可以了

